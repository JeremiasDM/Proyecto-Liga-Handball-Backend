import React, { useState, useEffect } from "react";

// Inlined Referente type
type Referente = {
	id: number;
	nombre: string;
	apellido: string;
	categoria: "Masculino" | "Femenino";
	dni: string;
	correo: string;
	equipo: string;
};

// Inlined validarReferente
function validarReferente(nuevo: Referente, referentes: Referente[]): string | null {
	if (
		!nuevo.nombre.trim() ||
		!nuevo.apellido.trim() ||
		!nuevo.categoria ||
		!nuevo.dni.trim() ||
		!nuevo.correo.trim() ||
		!nuevo.equipo.trim()
	) {
		return "Todos los campos son obligatorios.";
	}
	if (!/^[a-zA-Z\s]{2,}$/.test(nuevo.nombre)) {
		return "El nombre debe tener solo letras y al menos 2 caracteres.";
	}
	if (!/^[a-zA-Z\s]{2,}$/.test(nuevo.apellido)) {
		return "El apellido debe tener solo letras y al menos 2 caracteres.";
	}
	if (!/^\d{7,10}$/.test(nuevo.dni)) {
		return "El DNI debe tener entre 7 y 10 nÃºmeros.";
	}
	if (referentes.some(r => r.dni === nuevo.dni && r.id !== nuevo.id)) {
		return "El DNI ya estÃ¡ registrado.";
	}
	if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(nuevo.correo)) {
		return "Correo invÃ¡lido.";
	}
	if (!/^[a-zA-Z0-9\s]{2,}$/.test(nuevo.equipo)) {
		return "El equipo debe contener solo letras, nÃºmeros y espacios.";
	}
	return null;
}
// ðŸ›‘ Importamos los estilos del archivo principal
import { styles } from "./ReferentesPage"; 

type Props = {
Â  onGuardar: (referente: Referente) => void;
};

const categorias = ["Masculino", "Femenino"];

const RegistrarReferente: React.FC<Props> = ({ onGuardar }) => {
Â  interface FormData {
Â  Â  nombre: string;
Â  Â  apellido: string;
Â  Â  categoria: string;
Â  Â  dni: string;
Â  Â  correo: string;
Â  Â  equipoId: number;
Â  }
Â  const [form, setForm] = useState<FormData>({
Â  Â  nombre: "",
Â  Â  apellido: "",
Â  Â  categoria: "Masculino",
Â  Â  dni: "",
Â  Â  correo: "",
Â  Â  equipoId: 0,
Â  });
Â  const [clubs, setClubs] = useState<Array<{ id: number; nombre: string }>>([]);
Â  const [loading, setLoading] = useState(false);
Â  const [mensaje, setMensaje] = useState<{ tipo: 'error' | 'exito', texto: string } | null>(null);

Â  useEffect(() => {
Â  Â  fetch('http://localhost:3000/clubes')
Â  Â  Â  .then(res => res.json())
Â  Â  Â  .then(data => setClubs(data));
Â  }, []);

Â  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
Â  Â  const { name, value } = e.target;
Â  Â  setForm({
Â  Â  Â  ...form,
Â  Â  Â  [name]: name === 'equipoId' ? Number(value) : value,
Â  Â  });
Â  Â  if (mensaje) setMensaje(null); 
Â  };

Â  const handleSubmit = async (e: React.FormEvent) => {
Â  Â  e.preventDefault();
Â  Â  setLoading(true);
Â  Â  // Construir el objeto Referente correctamente
Â  Â  const referente: Referente = {
Â  Â  Â  id: Date.now(),
Â  Â  Â  nombre: form.nombre,
Â  Â  Â  apellido: form.apellido,
Â  Â  Â  categoria: form.categoria as "Masculino" | "Femenino",
Â  Â  Â  dni: form.dni,
Â  Â  Â  correo: form.correo,
Â  Â  Â  equipo: clubs.find(c => c.id === form.equipoId)?.nombre || "",
Â  Â  };

Â  Â  const error = validarReferente(referente, []);
Â  Â  if (error) {
Â  Â  Â  setMensaje({ tipo: 'error', texto: error });
Â  Â  Â  setLoading(false);
Â  Â  Â  return;
Â  Â  }
Â  Â  try {
Â  Â  Â  const response = await fetch('http://localhost:3000/api/register', {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  nombre: referente.nombre,
Â  Â  Â  Â  Â  apellido: referente.apellido,
Â  Â  Â  Â  Â  categoria: referente.categoria,
Â  Â  Â  Â  Â  dni: referente.dni,
Â  Â  Â  Â  Â  correo: referente.correo,
Â  Â  Â  Â  Â  equipo: referente.equipo,
Â  Â  Â  Â  Â  equipoId: form.equipoId,
Â  Â  Â  Â  }),
Â  Â  Â  });
Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  const errorText = await response.text();
Â  Â  Â  Â  console.error('Registro failed:', response.status, errorText);
Â  Â  Â  Â  setMensaje({ tipo: 'error', texto: errorText || 'Error al registrar referente.' });
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  const data = await response.json();
Â  Â  Â  if (data.success) {
Â  Â  Â  Â  setMensaje({ tipo: 'exito', texto: `Referente ${referente.nombre} registrado exitosamente. Revisa tu correo.` });
Â  Â  Â  Â  // Resetear formulario
Â  Â  Â  Â  setForm({ nombre: '', apellido: '', categoria: 'Masculino', dni: '', correo: '', equipoId: 0 });
Â  Â  Â  Â  onGuardar(referente);
Â  Â  Â  } else {
Â  Â  Â  Â  setMensaje({ tipo: 'error', texto: data.message || 'Error al registrar referente.' });
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  setMensaje({ tipo: 'error', texto: 'Error de conexiÃ³n con el servidor.' });
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  return (
Â  Â  <div>
Â  Â  Â  <h2 style={styles.formTitulo}>
Â  Â  Â  Â  Registro de Referente
Â  Â  Â  </h2>

Â  Â  Â  {/* Mensajes de ValidaciÃ³n/Ã‰xito - Usando estilos en lÃ­nea centralizados */}
Â  Â  Â  {mensaje && (
Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  ...styles.mensajeAlerta,
Â  Â  Â  Â  Â  Â  ...(mensaje.tipo === 'error' ? styles.mensajeError : styles.mensajeExito),
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {mensaje.texto}
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  <form onSubmit={handleSubmit} className="space-y-4"> 
Â  Â  Â  Â  
Â  Â  Â  Â  {/* AgrupaciÃ³n Nombre y Apellido */}
Â  Â  Â  Â  <div 
Â  Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  Â  Â  display: 'flex', 
Â  Â  Â  Â  Â  Â  Â  Â  gap: '16px',
Â  Â  Â  Â  Â  Â  Â  Â  // ðŸš€ CAMBIO: Agregar margen inferior para separarlo del siguiente campo (CategorÃ­a)
Â  Â  Â  Â  Â  Â  Â  Â  marginBottom: '16px' 
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  > 
Â  Â  Â  Â  Â  <input 
Â  Â  Â  Â  Â  Â  name="nombre" 
Â  Â  Â  Â  Â  Â  placeholder="Nombre" 
Â  Â  Â  Â  Â  Â  value={form.nombre} 
Â  Â  Â  Â  Â  Â  onChange={handleChange} 
Â  Â  Â  Â  Â  Â  // ðŸ›‘ APLICACIÃ“N DEL ESTILO OSCURO
Â  Â  Â  Â  Â  Â  style={{ ...styles.inputOscuro, flex: 1, marginBottom: 0 }} // Ajuste de marginBottom
Â  Â  Â  Â  Â  Â  required 
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <input 
Â  Â  Â  Â  Â  Â  name="apellido" 
Â  Â  Â  Â  Â  Â  placeholder="Apellido" 
Â  Â  Â  Â  Â  Â  value={form.apellido} 
Â  Â  Â  Â  Â  Â  onChange={handleChange} 
Â  Â  Â  Â  Â  Â  // ðŸ›‘ APLICACIÃ“N DEL ESTILO OSCURO
Â  Â  Â  Â  Â  Â  style={{ ...styles.inputOscuro, flex: 1, marginBottom: 0 }} // Ajuste de marginBottom
Â  Â  Â  Â  Â  Â  required 
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Categoria */}
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <select 
Â  Â  Â  Â  Â  Â  name="categoria" 
Â  Â  Â  Â  Â  Â  value={form.categoria} 
Â  Â  Â  Â  Â  Â  onChange={handleChange} 
Â  Â  Â  Â  Â  Â  // ðŸ›‘ APLICACIÃ“N DEL ESTILO OSCURO
Â  Â  Â  Â  Â  Â  style={styles.inputOscuro}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <option value="" disabled>â€” Seleccione CategorÃ­a â€”</option>
Â  Â  Â  Â  Â  Â  {categorias.map(c => <option key={c} value={c}>{c}</option>)}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* DNI */}
Â  Â  Â  Â  <input 
Â  Â  Â  Â  Â  name="dni" 
Â  Â  Â  Â  Â  type="text" 
Â  Â  Â  Â  Â  placeholder="DNI (sin puntos)" 
Â  Â  Â  Â  Â  value={form.dni} 
Â  Â  Â  Â  Â  onChange={handleChange} 
Â  Â  Â  Â  Â  // ðŸ›‘ APLICACIÃ“N DEL ESTILO OSCURO
Â  Â  Â  Â  Â  style={styles.inputOscuro}
Â  Â  Â  Â  Â  required 
Â  Â  Â  Â  />
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Correo */}
Â  Â  Â  Â  <input 
Â  Â  Â  Â  Â  name="correo" 
Â  Â  Â  Â  Â  type="email" 
Â  Â  Â  Â  Â  placeholder="Correo ElectrÃ³nico" 
Â  Â  Â  Â  Â  value={form.correo} 
Â  Â  Â  Â  Â  onChange={handleChange} 
Â  Â  Â  Â  Â  // ðŸ›‘ APLICACIÃ“N DEL ESTILO OSCURO
Â  Â  Â  Â  Â  style={styles.inputOscuro}
Â  Â  Â  Â  Â  required 
Â  Â  Â  Â  />
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Equipo */}
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  name="equipoId"
Â  Â  Â  Â  Â  Â  value={form.equipoId}
Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  style={styles.inputOscuro}
Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <option value={0} disabled>â€” Seleccione Equipo â€”</option>
Â  Â  Â  Â  Â  Â  {clubs.map(c => (
Â  Â  Â  Â  Â  Â  Â  <option key={c.id} value={c.id}>{c.nombre}</option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* BotÃ³n de Enviar */}
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  type="submit" 
Â  Â  Â  Â  Â  // ðŸ›‘ APLICACIÃ“N DEL ESTILO PRIMARIO
Â  Â  Â  Â  Â  style={styles.botonPrimario}
Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {loading ? 'Registrando...' : 'Guardar Referente'}
Â  Â  Â  Â  </button>
Â  Â  Â  </form>
Â  Â  </div>
Â  );
};

export default RegistrarReferente;
